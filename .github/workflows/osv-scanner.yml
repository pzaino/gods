# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow which sets up periodic OSV-Scanner scanning for vulnerabilities,
# in addition to a PR check which fails if new vulnerabilities are introduced.
#
# For more examples and options, including how to ignore specific vulnerabilities,
# see https://google.github.io/osv-scanner/github-action/

name: OSV-Scanner

on:
  pull_request:
    branches: [ "main" ]
  merge_group:
    branches: [ "main" ]
  schedule:
    - cron: '42 19 * * 1'
  push:
    branches: [ "main" ]

permissions:
  security-events: write
  contents: read
  actions: read

jobs:
  setup-go-and-scan:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from the repository
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Set up Go using the version specified in the go.mod file
      - name: Set up Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version-file: './go.mod'

      # Install Go dependencies based on go.mod
      - name: Install dependencies
        run: go mod download

      # Manually download and run OSV-Scanner for scheduled jobs
      - name: Download and Run OSV-Scanner (scheduled)
        if: ${{ github.event_name == 'push' || github.event_name == 'schedule' }}
        run: |
          ARCH=$(uname -m)
          if [[ "$ARCH" == "x86_64" ]]; then
            curl -sSL https://github.com/google/osv-scanner/releases/download/v1.8.5/osv-scanner_linux_amd64 -o osv-scanner
          else
            echo "Unsupported architecture: $ARCH"
            exit 1
          fi
          file osv-scanner  # Check if the binary is valid
          chmod +x osv-scanner
          ./osv-scanner --recursive --skip-git ./


      # Manually download and run OSV-Scanner for PRs
      - name: Run OSV-Scanner (PR)
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}
        run: |
          ARCH=$(uname -m)
          if [[ "$ARCH" == "x86_64" ]]; then
            curl -sSL https://github.com/google/osv-scanner/releases/download/v1.8.5/osv-scanner_linux_amd64 -o osv-scanner
          else
            echo "Unsupported architecture: $ARCH"
            exit 1
          fi
          file osv-scanner  # Check if the binary is valid
          chmod +x osv-scanner
          ./osv-scanner --recursive --skip-git ./

      # Run Dependency Review Action to ensure that dependency versions are safe and properly encoded
      - name: Run dependency review action
        uses: actions/dependency-review-action@ce3cf9537a52e8119d91fd484ab5b8a807627bf8 # v4.6.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true  # Allows the action to continue even if it fails, so we can debug it later

      # Debug Dependency Review Output
      - name: Debug Dependency Review Output
        if: failure()
        run: |
          if [ -f dependency-review-results.json ]; then
            cat dependency-review-results.json
          else
            echo "No dependency-review-results.json file found"
          fi
